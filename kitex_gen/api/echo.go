// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package api

import (
	"context"
	"fmt"
)

type Request struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
}

func NewRequest() *Request {
	return &Request{}
}

func (p *Request) InitDefault() {
}

func (p *Request) GetMessage() (v string) {
	return p.Message
}
func (p *Request) SetMessage(val string) {
	p.Message = val
}

func (p *Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Request(%+v)", *p)
}

var fieldIDToName_Request = map[int16]string{
	1: "message",
}

type Response struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
}

func NewResponse() *Response {
	return &Response{}
}

func (p *Response) InitDefault() {
}

func (p *Response) GetMessage() (v string) {
	return p.Message
}
func (p *Response) SetMessage(val string) {
	p.Message = val
}

func (p *Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Response(%+v)", *p)
}

var fieldIDToName_Response = map[int16]string{
	1: "message",
}

type Echo interface {
	Echo(ctx context.Context, req *Request) (r *Response, err error)
}

type EchoEchoArgs struct {
	Req *Request `thrift:"req,1" frugal:"1,default,Request" json:"req"`
}

func NewEchoEchoArgs() *EchoEchoArgs {
	return &EchoEchoArgs{}
}

func (p *EchoEchoArgs) InitDefault() {
}

var EchoEchoArgs_Req_DEFAULT *Request

func (p *EchoEchoArgs) GetReq() (v *Request) {
	if !p.IsSetReq() {
		return EchoEchoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EchoEchoArgs) SetReq(val *Request) {
	p.Req = val
}

func (p *EchoEchoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EchoEchoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoEchoArgs(%+v)", *p)
}

var fieldIDToName_EchoEchoArgs = map[int16]string{
	1: "req",
}

type EchoEchoResult struct {
	Success *Response `thrift:"success,0,optional" frugal:"0,optional,Response" json:"success,omitempty"`
}

func NewEchoEchoResult() *EchoEchoResult {
	return &EchoEchoResult{}
}

func (p *EchoEchoResult) InitDefault() {
}

var EchoEchoResult_Success_DEFAULT *Response

func (p *EchoEchoResult) GetSuccess() (v *Response) {
	if !p.IsSetSuccess() {
		return EchoEchoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoEchoResult) SetSuccess(x interface{}) {
	p.Success = x.(*Response)
}

func (p *EchoEchoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoEchoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoEchoResult(%+v)", *p)
}

var fieldIDToName_EchoEchoResult = map[int16]string{
	0: "success",
}
